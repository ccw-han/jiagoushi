1简介说明
奇数个，最少三个
1分布式协调服务，暴露了一些公用服务，命名，配置管理，同步控制，群组服务。存一些配置想你想
反应给服务器，zk实现共识，集群管理，leader选择
2基于ZAB算法，分布式一致性问题的利器，最好是奇数个
顺序一致性：一个客户端发起请求，严格按照顺序。zookeeper是一个整体，保证三者数据一致，有锁里额 
原子性：要么整个集群所有机器应用一个事务，要么不应用
单一视图：无论连接谁，所有服务端数据一致
可靠性：一旦服务器应用一个事务，并完成对客户端的相应，那么该事务状态保留下来，除非有
另一个事务去更改，数据同步不成功，那么就一直等着，挂掉一半以上就不提供服务了
实时性：一旦事务应用，立即获取变更后的数据，仅仅能保证在一段时间内，客户端最终能一定能从
服务端读取最新的数据状态
不能百分之百，天猫用nameserver更轻量的无状态的
3目标1 简单数据结构，树形 和linux很像
构建集群：半数以上就可以提供服务 事务请求直接操作文件了
高性能：存在内存中，并直接服务于所有的非事务性请求，以读操作性能很高。12-13w的qps
顺序访问：递增的事务编号
4结构其实是树形结构，标准的文件系统
znode节点可以是临时的，可以被监控
5组成，leader follower observer
observer特殊的follower，可以接受reader请求，但不参与选举，只负责于leader同步数据
2x搭建zookeeper与配置文件说明
3java操作zookeeper
4应用场景
基于观察者模式的设计的分布式服务管理框架，负责存储和管理大家都关心的数据
接受观察者注册，一旦数据状态发生变化，zookeeper就负责通知以及在zookker上注册
的那些观察者做出相应的反应，以实现集群中类似master/slave的模式
1配置管理 数据量小，内容运行时发生变化，各个节点共享信息，配置一致
2集群管理 希望知道有多少机器工作，对每天集群的运行时的状态数据收集，每台集群进行上下线操作
3发布与订阅  dubbo
4数据库切换		初始化zookeeper读取一个节点上配置文件，当配置一旦便跟个，通知发送给各个客户端，每个互动接受变
通知后，就可以从最新的数据的获取
5分布式日志的收集 
6分布式锁，队列管理
5zkClient客户端
6Curator框架
原生api太复杂，可以用完美的第三方解决，就是这个框架 ,apache顶级项目

什么情况下用
1数据量小
2运行时态发送变化
3各节点共享信息，配置一致

配置活的，不用写死
或者分布式任务，一起执行比如cutdownlatch cyclicbarrier

2环境搭建
三个节点 121 122 123 都装
/usr/local
/usr/local/software 
cd /usr/local/software
tar -zxvf zookeeper-3.4.5.rat.gz -C /usr/local
mv zookeeper-3.4.5/ zookeeper
cd /usr/local/zookeeper
修改环境变量
vim /etc/profile  环境变量
export ZOOKEEPER_HOME=/usr/local/zookeeper
export PATH=.:$jJAVA_HOEM/bin:$ZOOKEEPER_HOME/bin:$PATH
source /etc/profile
cd zookeeper/conf/
mv zoo_sample.cfg zoo.cfg  	改名
vim zoo.cfg
dataDir=/usr/local/zookeeper/data
server.0=192.168.1.121:2888:3888		这个0就是下面那个存的0
server.1=192.168.1.122:2888:3888
server.2=192.168.1.123:2888:3888
cd /usr/local/zookeeper
加一个data文件夹
mkdir data
在data下
vim myid
写个0     第二个节点写1  第三个写2
/zookeeper/bin
zkServer.sh start  	启动服务 配了环境变量了，在什么位置都可以敲
zkServer.sh status 可以查看是什么角色
随便一个节点
zkCli.sh  客户端
就可以看到一些信息，看到数据
可以用jar客户端
右击jar包，在此处打开命令行，然后java -jar zookeeper=dev=ZooInspector.jar 在windown下启动使用可视化工具
连接随便哪个节点
有一个文件夹
zookeeper/quota.txt
eclipse也可以装插件
在zkCli命令来操作
ls /
ls /zookeeper
创建节点
节点和目录文件没关系，都可以存内容
create /bhz  hadoop     相当于在/ 下有一个叫bhz的文件，内容为hadoop,bhz相当于节点，有内容就是文件，没有就是目录
get /bhz    得到的是hadoop 还有一些节点操作信息，比如时间啊，每次操作节点都会有唯一得到标识
set /bhz baihe  设置内容
create /bhz/attr  shuxin1
get /bhz/attr    得到shuxing
delete /bhz 不行，因为不为空有子节点
rmr /bhz 递归删除，这时候就整个删了/bhz
节点也可以传文件，文件内容复制到这个节点里了，图片就是二进制

3java操作zookeeper
zookeeper-3.3.4.jar 官方提供的javaAPI zkclient-0.1.jar在原生api基础上进行扩展的开源java客户端
curator-client-2.4.2.jar 
curator-framework-2.4.2.jar
curator-recipes-2.4.2.jar
1创建会话方法：
zookeeperbase.java
final CONNECT_ARRR="192.168.1.121:2181,......"
SESSION_OUTTIME=5000;ms 超时时间
//阻塞程序执行，用于等待zookeeper连接成功，发送成功信号
CountDownLatch connectSemaphore = new CountDownLatch(1);
很多常量配置，和配置文件一样  这个是异步连接的，所以会往下走，利用这个阻塞，然后成功后再打破，往下走
ZooKeeper zk=new ZooKeeper(CONNECT_ARRR,SESSION_OUTTIME,new Watcher(){
 process(WatchedEvent event){
	KeeperState keeperState=event.getState();事件状态
	EventType eventType=event.getTyoe();
	if(KeeperState.SyncConnected == keeperState){//成功状态
		if( EventType.None == eventType){
			//如果建立连接成功，则发送信号量，让后续阻塞程序向下执行
			connectedSemaphore.countDown();
			println("建立连接")
		}
	
	
	}
	
 }


});

//进行阻塞，程序不往下走了
connectSemaphore.await();
//create父节点 有就不能创建
String ret=zk.create("/testRoot","textRoot".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);//持久，持久顺序，临时，临时顺序
//create子节点
临时节点，本次会话有效，关闭以后就没了
zk.create("/testRoot/children","textRoot".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);

zk.close();
分布式锁
 在testRoot下临时建一个children节点，会加一把锁，然后做一些操作，操作结束了，这个临时节点就close掉，锁就去除了
c1 c2 一个zookeeper集群 几个数据库 如何做分布式锁
同一个web部署到c1和c2上
各自的数据库，数据一样的。
以上模型，并发操作有并发安全
c1创建一个临时节点，随变叫什么名字。
c2也去创建一个临时节点，先get，有没有，没有去建，有就等待。会话必须关闭，不然会一直占用资源
c1
get /usr/1001 没有
create node(EPHEMERAL)
update  持久化操作，节点之间的数据同步操作
zk.close() 临时节点已经消失了
c2
get /usr/1001 没有
create node(EPHEMERAL)
update  持久化操作，节点之间的数据同步操作
zk.close() 临时节点已经消失了
zookeeper一个时间点只能有一个消费者进去处理
获取节点的值

byte[] data=zk.getData("/testRoot",false,null);
new String(data)
List list=zk.getChildren("/textRoot",false); 这个children直接子节点
for(String path : list) path 为相对路径


异步删除
-1  是 版本号，没有匹配都删
zk.delete("/testRoot/c1",-1,new AsyncCallback.VoidCallback(){
	public void processResult(int rc , String path , Object ctx){
		println(rc) 响应码，0 调用成功 -4 端口连接 -110节点存在 -112 会话过期
		println(path) 路径参数
		println(ctx) 是上面的传进来的参数，这里为a
	
	}


},"a")
修改节点的值

zk.setData("/testRoot","ddd".getBytes(),-1);-1为版本号

判断节点是否存在

zk.exists("/testRoot/a2",false);



原生api不能递归创建，只能先创父再创子
不支持序列化
kryo序列化框架
创建也分同步和异步，同步有返回值，肯定有个延迟
异步在四个参数上多加俩个参数
注册一个异步回调函数
 
watcher 机制
一个客户端对一个节点就可以有一个watcher new一个watcher就完事了
单独一个线程和zk连接，对那个节点进行监控 触发事件直接触发回调函数，相应做代码处理 动作为watch
api中有一个布尔类型的watcher参数
有个watch事件，是一次性触发的，当监视数据变化 只关注当前节点，不包括子节点
会设置了该watch的client即 watcher
某些变化会有一些事件类型和状态类型
znode节点相关的
EventType.NodeCreated
EventType.NodeDataChanged
EventType.NodeChildrenChanged
EventType.NodeDeleted

状态类型 和客户端实例相关

KeeperState.Disconnected
KeeperState.Syncconnected
KeeperState.AuthFailed
KeeperState.Expired

zookeeper集群 有 f l f 
c1 c2 web应用  c1 称之为watcher
一个c1 可以拥有不同的watcher 对一个节点对应一个watcher
如何建立，new watcher（）
c2 对以上的节点进行操作，那么zookeeper反馈给c1的watcher，然后c1
有对应的代码处理，监控的动作叫watch
一次性的，不是一直监听的
一直监听那得重复new
ZooKeeperWatcher implements Watcher{
	process(WatchedEvent event){
		event.getState();
		event.getType()
		event.getPath() 受影响的path
		
	
	}

}

主线程main往下走，其他线程，main不能停
zkWatch=new ZooKeeperWatcher ()
zkWatch.createConnection(...);
第一步创建父节点
zkWatch.createPath("p","当前时间"，true);//这个方法自己写的，里面调原生api
 
zookeeper的ACL认证 Access Control List AUTH
权限模式，授权对象，权限
权限模式： Scheme
IP 
Digest 类似于密码
World 特殊的digets
Super 超级用户模式

权限对象：权限赋予的对象

权限： create delete read write admin

其他客户端来访问需要做一个认证
zk.addAuthInfo("digets","123456".getBytes())

acls = new ArrayList<ACL>(1);
for(ACL ids_acl : Ids.CREATE_ALL_ACL){

		acls.add(ids_acl)
	
}

api加上这个acls这个集合
api加上这个acls这个集合


eclipse集成管理zookeeper
插件添加 zookeeperBrowser 
http://www.massedynamic.org/eclipse/updates/


一个客户端运行，进行api创建节点，然后c1 c2 对zookeeper集群进行节点监听
c1 c2会有相应的感知到，可以做相应的代码处理
  
框架 封装了原生api
引入
zkClient-0.1.jar

创建方法

zkc=new ZkClient(new ZkConnection(ip),10000);
zkc.createEphemeral("/temp")
zkc里面很多没有watch的这个参数





















